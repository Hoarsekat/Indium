"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[624],{98336:e=>{e.exports=JSON.parse('{"functions":[{"name":"CreateService","desc":"Creates and returns a new service.\\n\\n:::caution\\nWhile creating a service after Indium starts is fine, it is heavily advised against.\\n:::\\n```lua\\n-- Create an example service\\nlocal ExampleService = Indium.CreateService({\\n    Name = \\"ExampleService\\",\\n    Client = {},\\n})\\n\\n-- IndiumStart is called after Indium is initialized\\nfunction ExampleService:IndiumStart()\\n    print(self.Name, \\"has started!\\")\\nend\\n\\n-- IndiumInit is called when Indium is first started\\nfunction ExampleService:IndiumInit()\\n    print(self.Name, \\"has initialized!\\")\\nend\\n```","params":[{"name":"ref","desc":"","lua_type":"Reference"}],"returns":[{"desc":"","lua_type":"Service\\r\\n"}],"function_type":"method","source":{"line":109,"path":"src/Server.luau"}},{"name":"AddServices","desc":"Requires the descendants of the specified parent that are a module.\\n```lua\\nIndium.AddServices(path.to.Services)\\n```","params":[{"name":"Parent","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"{ Service }\\r\\n"}],"function_type":"method","source":{"line":139,"path":"src/Server.luau"}},{"name":"GetService","desc":"Gets the service from the name that is specified.","params":[{"name":"Name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Service\\r\\n"}],"function_type":"method","source":{"line":159,"path":"src/Server.luau"}},{"name":"Start","desc":"Starts Indium and should only be called once.\\n\\nYou may create services _before_ and _after_ Indium starts.\\n\\n:::caution\\nThere is currently no option to add middleware.\\nThis feature will be added soon.\\n:::\\n\\n```lua\\nIndium:Start():andThen(function()\\n    print(\\"Indium started!\\")\\nend):catch(warn)\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"method","source":{"line":184,"path":"src/Server.luau"}},{"name":"OnStart","desc":"Returns a promise that is resolved once Indium has started.\\n```lua\\nIndium.OnStart():andThen(function()\\n    local ExampleService = Indium.Services.ExampleService\\n    ExampleService:DoSomething()\\nend):catch(warn)\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":242,"path":"src/Server.luau"}}],"properties":[],"types":[{"name":"Reference","desc":"Acts as a reference to new services.","fields":[{"name":"Name","lua_type":"string","desc":""},{"name":"Client","lua_type":"table?","desc":""},{"name":"[any]","lua_type":"any","desc":""}],"source":{"line":16,"path":"src/Server.luau"}},{"name":"Service","desc":"","fields":[{"name":"Name","lua_type":"string","desc":""},{"name":"Client","lua_type":"ServiceClient","desc":""},{"name":"Communication","lua_type":"Comm","desc":""},{"name":"[any]","lua_type":"any","desc":""}],"source":{"line":31,"path":"src/Server.luau"}},{"name":"ServiceClient","desc":"","fields":[{"name":"Server","lua_type":"Service","desc":""},{"name":"[any]","lua_type":"any","desc":""}],"source":{"line":45,"path":"src/Server.luau"}}],"name":"IndiumServer","desc":"Allows for the creation of services and any bridges between client communication.\\n\\n```lua\\nlocal Indium = require(path.to.Indium)\\n\\n-- Requires and preloads modules within a specified folder:\\nIndium.AddServices(path.to.Services)\\n\\n-- Starts the Indium server:\\nIndium.Start():andThen(function()\\n    print(\\"Indium has loaded on the server!\\")\\nend):catch(warn)\\n```","realm":["Server"],"source":{"line":68,"path":"src/Server.luau"}}')}}]);